#include "Exploits.h"
#include "Lib/Color.hpp"
#include "Envy.hpp"
#include "Memory/Scan.hpp"

uintptr_t GameAssembly = Internal::GetModuleBase("GameAssembly.dll");

std::vector<size_t> cameraaddrs;
std::vector<size_t> rapidaddrs;
std::vector<size_t> feedbackaddrs;
std::vector<size_t> customizeaddrs;
std::vector<size_t> basketballaddrs;
std::vector<size_t> skinaddrs;
std::vector<size_t> devaddrs;

Envy envy;

void menu() {
    system("cls");
    std::string CamPrefab;
    std::string FeedbackPrefab;

    while (true) {
        std::cout << "\n";
        std::cout << dye::grey(" Welcome to ") << dye::red("Envy Free") << "\n\n";
        std::cout << dye::grey(" --> ") << dye::red("https://discord.gg/d3jNcC8YZh") << dye::grey(" <-- ") << "\n\n";

        std::cout << dye::grey(" [1] ") << dye::white("Swap Camera") << "\n";
        std::cout << dye::grey(" [2] ") << dye::white("Swap Clipboard") << "\n";

        std::cout << " >> ";

        std::string choice;
        std::getline(std::cin, choice);

        if (choice == "1") {
            system("cls");
            std::cout << dye::red(" [=] ") << dye::white("Enter your prefab: ");
            std::getline(std::cin, CamPrefab);
            envy.ReplaceString(cameraaddrs, CamPrefab);
            std::cout << dye::grey("[ShareCamera] Set to: ") << dye::red(CamPrefab) << "\n";
            Sleep(1000);
            Beep(750, 300);
            system("cls");
        }
        else if (choice == "2") {
            system("cls");
            std::cout << dye::red(" [=] ") << dye::white("Enter your prefab: ");
            std::getline(std::cin, FeedbackPrefab);
            envy.ReplaceString(feedbackaddrs, FeedbackPrefab);
            Sleep(1000);
            Beep(750, 300);
            std::cout << dye::grey("[FeedbackTool] Set to: ") << dye::red(FeedbackPrefab) << "\n";
            system("cls");
        }
        else if (choice == "9") {
            break;
        }
        else {
            std::cout << dye::vanilla(" [!] ") << dye::white("Invalid Option.") << "\n";
            system("cls");
        }
    }
}

void r()
{
	std::cout << dye::green(" [=] ") << dye::white("Injected.") << "\n";
	std::cout << dye::green(" [=] ") << dye::white("Base: 0x") << Internal::BaseAddress << "\n";

    envy.FindString(cameraaddrs, Internal::Prefab::ShareCamera);
    std::cout << dye::green(" [=] ") << dye::white("Camera Initialized.") << "\n";

    envy.FindString(feedbackaddrs, Internal::Prefab::ShareCamera);
    std::cout << dye::green(" [=] ") << dye::white("Feedback Tool Initialized.") << "\n";

    envy.FindUTF(feedbackaddrs, Internal::Prefab::ClothingCustomizer);
    std::cout << dye::green(" [=] ") << dye::white("Feedback Tool Initialized.") << "\n";

    Sleep(100);

    menu();
}

        //else if (choice == "3") {
        //    mem.FindFloat(rapidaddrs, 1.59312654f);
        //    mem.ReplaceFloat(rapidaddrs, 5.0f);
        //    std::cout << dye::grey(" [=] ") << dye::white("Success!") << "\n";
        //    Sleep(1000);
        //    std::cout << dye::grey(" [=] ") << dye::white("Enabled.") << "\n";
        //    system("cls");
        //}